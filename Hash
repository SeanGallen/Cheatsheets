[ ] will return the value of the given agruement.  Index value and
key name are the agruement choices.

[ ]= It is an Element Assignment where it reassigns a key's value.
h = { 1 => 2}
h[1] = 3
h will not return {1 => 3}


Delete ~ Deletes the key - value pair and returns the value.
h = {1 => 2}
h.delete(1)  will return 2
h = {1=> 2}
h.delete("y2") will return nil
in a block it will run through the hash and if not found return the
block output.

Each ~ you can run the each "method" through the hash.
h = {1=> 2}
h.delete("y2") will return nil
 In a block it will run through the hash and if not found return the
 block output.

Fetch ~ It can take two arguments where the first argument is a key that is
searched for and returns the value.  If the key is not found it returns the second
argument.  Now if the 1st argument is given and the Second argument is not given it returns an ERROR ONLY
if it cannot find what it is fetching for.

  h = { "a" => 100, "b" => 200 }
  h.fetch("a")                            #=> 100
  h.fetch("z", "go fish")                 #=> "go fish"
  h.fetch("z") { |el| "go fish, #{el}"}   #=> "go fish, z"

key? ~ tells if the key exist and returns a True or False.

.flatten ~Returns a new array that is a one-dimensional flattening of this hash.
{'a' => {"b" => :c}, 1 =>3 }.flatten
=> ["a", {"b"=>:c}, 1, 3]

.inspect~ Return the contents of this hash as a string.
{'a' => {"b" => :c}, 1 =>3 }.inspect
=> "{\"a\"=>{\"b\"=>:c}, 1=>3}"

